tabular((cohort + 1) ~ (n = 1) + comfort_dx + proc_career + curriculum, data = demo)
# Confidence level visualization
ggplot(df, aes(x = question, fill = level)) +
facet_wrap(~cohort) +
geom_bar(position = "fill") +
labs(
title = "Distribution of Confidence",
x = "Question identifiers",
y = "Response count distribution",
caption = "Each question subgroup (e.g. CS, CF, CV, VF, VS) are in increasing difficulty"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_viridis_d()
# Data needed is overconfidence and demographic
df <- na.omit(inner_join(demo, df_overconfidence, by = "id"))
# Confidence level visualization
ggplot(df, aes(x = question, fill = level)) +
facet_wrap(~cohort) +
geom_bar(position = "fill") +
labs(
title = "Distribution of Confidence",
x = "Question identifiers",
y = "Response count distribution",
caption = "Each question subgroup (e.g. CS, CF, CV, VF, VS) are in increasing difficulty"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_viridis_d()
# Similar data frame as above
ggplot(df, aes(x = level, fill = cohort)) +
facet_wrap(~cohort, ncol = 1) +
geom_bar(aes(y = ..prop.., group = 1), position = "dodge") +
scale_fill_viridis_d() +
theme_minimal() +
coord_flip()
# Data
df <- inner_join(demo, df_concordance, by = "id") %>% na.omit()
df
ls()
df
df_concordance
?gather
# Data
df <- gather(df_concordance[c("id", "question", "correctness", "confidence")], key = "measure", value = "value", -id, -question) %>%
inner_join(demo, ., by = "id") %>%
na.omit()
warnings()
df
summary(df)
df
names(df)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = curriculum, group = measure)) +
geom_bar(aes(y = value), position = "dodge")
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, group = measure)) +
geom_bar(aes(y = value), position = "dodge")
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, group = measure)) +
geom_bar(position = "dodge")
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, group = measure)) +
geom_bar(position = "dodge") +
scale_fill_viridis_d()
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
facet_wrap(~curriculum) +
geom_bar(position = "dodge") +
scale_fill_viridis_d()
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
facet_wrap(~curriculum) +
geom_bar(position = "fill") +
scale_fill_viridis_d(option = "E")
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
facet_wrap(~curriculum) +
geom_bar(position = "fill") +
scale_fill_viridis_d(begin = .2, end = .8)
# Confidence level visualization
ggplot(df, aes(x = question, fill = level)) +
facet_wrap(~cohort) +
geom_bar(position = "fill") +
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = curriculum)) +
facet_wrap(~measure) +
geom_bar(position = "fill") +
scale_fill_viridis_d(begin = .2, end = .8)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = curriculum)) +
facet_wrap(~measure) +
geom_bar(position = "fill") +
scale_fill_viridis_d(begin = .2, end = .8)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = curriculum)) +
facet_wrap(~measure) +
geom_bar(position = "fill") +
scale_fill_viridis_d(begin = .3, end = .7)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = curriculum)) +
facet_wrap(~measure) +
geom_bar(position = "dodge") +
scale_fill_viridis_d(begin = .3, end = .7)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = curriculum)) +
facet_wrap(~measure) +
geom_bar(aes(y=..prop.., group=1), position = "dodge") +
scale_fill_viridis_d(begin = .3, end = .7)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
geom_bar(position="dodge") +
scale_fill_viridis_d(begin = .3, end = .7)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
geom_bar(aes(y=..count../sum(..count..)), position="dodge") +
scale_fill_viridis_d(begin = .3, end = .7)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
geom_bar(aes(y=..count../sum(..count..)), position="dodge") +
scale_fill_viridis_d(begin = .2, end = .8)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
geom_bar(aes(y=..count../sum(..count..)), position="dodge") +
scale_fill_viridis_d(begin = .4, end = .8)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
facet_wrap(~curriculum) +
geom_bar(aes(y=..count../sum(..count..)), position="dodge") +
scale_fill_viridis_d(begin = .4, end = .8)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
facet_wrap(~curriculum) +
geom_bar(aes(y=..prop..), position="dodge") +
scale_fill_viridis_d(begin = .4, end = .8)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
facet_wrap(~curriculum) +
geom_bar(position="dodge") +
scale_fill_viridis_d(begin = .4, end = .8)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
facet_wrap(~curriculum) +
geom_bar(position="dodge", stat = "summary", fun.y = "mean") +
scale_fill_viridis_d(begin = .4, end = .8)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
facet_wrap(~curriculum) +
geom_bar(aes(y = value), position="dodge", stat = "summary", fun.y = "mean") +
scale_fill_viridis_d(begin = .4, end = .8)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
facet_wrap(~curriculum) +
geom_bar(aes(y = value), position="dodge", stat = "summary", fun.y = "mean") +
scale_fill_viridis_d(begin = .1, end = .9)
# Visualize confidence and accuracy by curriculum
ggplot(df, aes(x = question, fill = measure)) +
facet_wrap(~curriculum) +
geom_bar(aes(y = value), position="dodge", stat = "summary", fun.y = "mean") +
scale_fill_viridis_d(begin = .2)
# Data needed is overconfidence and demographic
df <- na.omit(inner_join(demo, df_overconfidence, by = "id"))
# Confidence level visualization
ggplot(df, aes(x = question, fill = level)) +
facet_wrap(~cohort) +
geom_bar(position = "fill") +
labs(
title = "Distribution of Confidence",
x = "Question identifiers",
y = "Response count distribution",
caption = "Each question subgroup (e.g. CS, CF, CV, VF, VS) are in increasing difficulty"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_viridis_d()
# Confidence level by curriculum
ggplot(df, aes(x = question, fill = level)) +
facet_wrap(~curriculum) +
geom_bar(position = "fill") +
labs(
title = "Distribution of Confidence",
x = "Question identifiers",
y = "Response count distribution",
caption = "Each question subgroup (e.g. CS, CF, CV, VF, VS) are in increasing difficulty"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_viridis_d()
# Confidence level visualization by cohort
ggplot(df, aes(x = question, fill = level)) +
facet_wrap(~cohort) +
geom_bar(position = "fill") +
labs(
title = "Distribution of Confidence",
x = "Question identifiers",
y = "Response count distribution",
caption = "Each question subgroup (e.g. CS, CF, CV, VF, VS) are in increasing difficulty"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_viridis_d()
# Confidence level by curriculum
ggplot(df, aes(x = question, fill = level)) +
facet_wrap(~curriculum) +
geom_bar(position = "fill") +
labs(
title = "Distribution of Confidence",
x = "Question identifiers",
y = "Response count distribution",
caption = "Each question subgroup (e.g. CS, CF, CV, VF, VS) are in increasing difficulty"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_viridis_d()
# Data needed is overconfidence and demographic
df <- na.omit(inner_join(demo, df_overconfidence, by = "id"))
# Confidence level by curriculum
ggplot(df, aes(x = question, color = level, fill = level)) +
facet_wrap(~curriculum) +
geom_bar(position = "fill") +
labs(
title = "Distribution of Confidence",
x = "Question identifiers",
y = "Response count distribution",
caption = "Each question subgroup (e.g. CS, CF, CV, VF, VS) are in increasing difficulty"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
# Libraries
source("1_libraries.R")
# Date intake
source("2_intake.R")
# Data tidying
source("3_tidy.R")
# Data
df <-
inner_join(demo[c("id", "cohort", "curriculum", "interest_level", "comfort_dx", "proc_career")], df_concordance, by = "id") %>%
mutate_at(c("id", "question", "agreement"), funs(factor(.))) %>%
na.omit()
# Description of data
tabular((curriculum + cohort + 1) ~ (correctness + confidence + agreement)*(mean + sd)*Format(digits = 2), data = df) #%>%
df
df$agreement
df
# Data
df <-
inner_join(demo[c("id", "cohort", "curriculum", "interest_level", "comfort_dx", "proc_career")], df_concordance, by = "id") %>%
mutate_at(c("id", "question"), funs(factor(.))) %>%
na.omit()
# Description of data
tabular((curriculum + cohort + 1) ~ (correctness + confidence + agreement)*(mean + sd)*Format(digits = 2), data = df) #%>%
# Data
df <-
inner_join(demo[c("id", "cohort", "curriculum", "interest_level", "comfort_dx", "proc_career")], df_concordance, by = "id") %>%
mutate_at(c("id", "question"), funs(factor(.))) %>%
na.omit()
# Initial regressions ...
a <- clmm(agreement ~ curriculum + (1 | id), data = df, Hess = 1)
# Initial regressions ...
a <- clmm(factor(agreement) ~ curriculum + (1 | id), data = df, Hess = 1)
clmm(factor(agreement) ~ curriculum + (1}id) + (1|cohort/curriculum), data = df, Hess = 1)
clmm(factor(agreement) ~ curriculum + (1|id) + (1|cohort/curriculum), data = df, Hess = 1)
f <- clmm(factor(agreement) ~ curriculum + cohort +  (1|cohort/id) + (1|cohort/curriculum), data = df, Hess = 1)
f
summary(f)
1/exp(-1.16)
exp(-1.16)
summary(e)
e <- clmm(factor(agreement) ~ curriculum + cohort + curriculum:cohort + (1 | cohort / id), data = df)
summary(e)
knitr::opts_chunk$set(
cache = TRUE,
warning = FALSE,
eval = TRUE,
echo = FALSE,
include = TRUE,
message = FALSE,
options(scipen = 999, digits = 3)
)
options(
xtable.table.placement = "H",
xtable.comment = FALSE
)
# Libraries
source("1_libraries.R")
# Date intake
source("2_intake.R")
# Data tidying
source("3_tidy.R")
knitr::opts_chunk$set(
cache = TRUE,
warning = FALSE,
eval = TRUE,
echo = FALSE,
include = TRUE,
message = FALSE,
options(scipen = 999, digits = 3)
)
options(
xtable.table.placement = "H",
xtable.comment = FALSE
)
n_GRAD + n_PGY3 + n_PGY2 + n_PGY1
tabular((cohort + 1) ~ (n = 1) + comfort_dx + proc_career + curriculum, data = demo) %>%
as.matrix() %>%
xtable(., caption = "Cardiac Views") %>%
print(., include.rownames = FALSE, include.colnames = FALSE, caption.placement = "top")
tabular((cohort + 1) ~ (n = 1) + comfort_dx + proc_career + curriculum, data = demo) # %>%
ls()
df
demo
n_GRAD
n_PGY3
n_PGY2
n_PGY1
length(demo$id[demo$cohort=="GRAD"])/n_GRAD * 100
id[demo$cohort=="GRAD"])/n_GRAD * 100 ` |
| PGY3 | `r n_PGY3` | `r length(demo$
length(demo$id[demo$cohort=="PGY3"])/n_PGY3 * 100
length(demo$id[demo$cohort=="PGY2"])/n_PGY2 * 100
length(demo$id[demo$cohort=="PGY1"])/n_PGY1 * 100
n_GRAD
n_PGY1
n_PGY3
df
ls()
df_big
df_scores
df_concordance
df
ls()
df_scores
df_conf
df_overconfidence
df_conf
df_concordance
```{r}
# Libraries
source("1_libraries.R")
# Date intake
source("2_intake.R")
# Data tidying
source("3_tidy.R")
# Date intake
source("2_intake.R")
# Data tidying
source("3_tidy.R")
# Date intake
source("2_intake.R")
# Data tidying
source("3_tidy.R")
# Add ID numbers to each subject, ids package used
num <- length(df_big$email)
# Date intake
source("2_intake.R")
# Add ID numbers to each subject, ids package used
num <- length(df_big$email)
id <- adjective_animal(n = num, style = "snake")
tmp <- add_column(df_big, id, .before = 1)
df <- tmp
# Break into demographic and question data frames from total
demo <- df[c(1, 4:13)]
quiz <- df[c(1, 14:53)]
# Create factor of career-plan to be either CV-ultrasound oriented or not
demo$proc_career <- "No"
demo$proc_career[df$career_plan == "Pulmonology, Critical Care" | df$career_plan == "Cardiology"] <- "Yes"
# Clean up the demographic data into factors
cols <- names(demo[c(2:length(names(demo)))])
demo <-
demo %>%
mutate_at(cols, funs(factor(.)))
# Clean up quiz answers
cols <- names(quiz[c(2:41)])
quiz <-
quiz %>%
mutate_at(cols, funs(factor(.)))
# Clean up dataframes
rm(df, num, tmp, cols)
# Score the quiz
df_scores <- CTT::score(quiz[, questions], answers, ID = demo$id, output.scored = TRUE)
# Place into a tibble
df_scores <-
df_scores$scored %>%
as.data.frame %>%
rownames_to_column %>%
as_tibble
# Rename the ID column
names(df_scores)[1] <- "id"
# Grading the quiz per entry
df_scores$total <- rowSums(df_scores[-1])
df_scores$percent <- df_scores$total/21 * 100
# Confidence levels
df_conf <-
quiz[, -which(names(quiz) %in% questions)] %>%
mutate_at(vars(2:21), funs(recode(., "High"=1, "Low"=0, "Medium"=1)))
# Rename columns to match
names(df_conf)[2:21] <- questions
# Scores are contained in a similar field, 21 columns long
df <- df_scores[1:21]
# Looping through both tables
# Output is /df/ that has confidence scoring included
for(y in 2:21) {
if (is.na(df[x,y]) | is.na(df_conf[x,y])) {
df[x,y] <- NA
} else if (df[x,y] == 0 & df_conf[x,y] == 1) {
df[x, y] <- "overconfidence"
} else if (df[x,y] == 1 & df_conf[x,y] == 1) {
df[x,y] <- "understanding"
} else if (df[x,y] == 1 & df_conf[x,y] == 0) {
df[x, y] <- "underconfident"
} else if (df[x,y] == 0 & df_conf[x,y] == 0) {
df[x, y] <- "knowledge_gap"
}
for(x in 1:89) {
if (is.na(df[x,y]) | is.na(df_conf[x,y])) {
df[x,y] <- NA
} else if (df[x,y] == 0 & df_conf[x,y] == 1) {
df[x, y] <- "overconfidence"
} else if (df[x,y] == 1 & df_conf[x,y] == 1) {
df[x,y] <- "understanding"
} else if (df[x,y] == 1 & df_conf[x,y] == 0) {
df[x, y] <- "underconfident"
} else if (df[x,y] == 0 & df_conf[x,y] == 0) {
df[x, y] <- "knowledge_gap"
}
# Date intake
source("2_intake.R")
# Data tidying
source("3_tidy.R")
ls()
df_big
df_conf
df_overconfidence
df_concordance
demo
df
source('~/Box Sync/projects/ultrasound/cv_ultrasound/code/1_libraries.R')
# Compare groups
compareGroups(cohort ~ curriculum + speciality + experience + icu_num + comfort_dx + comfort_tx + interest_level)
# Compare groups
compareGroups(cohort ~ curriculum + speciality + experience + icu_num + comfort_dx + comfort_tx + interest_level, data = df)
# Compare groups
compareGroups(cohort ~ curriculum + speciality + experience + icu_num + comfort_dx + comfort_tx + interest_level, data = as.data.frame(df))
# Data set
df <- demo
# Compare groups
compareGroups(cohort ~ curriculum + speciality + experience + icu_num + comfort_dx + comfort_tx + interest_level, data = df)
# Compare groups
compareGroups(cohort ~ curriculum + specialty + experience + icu_num + comfort_dx + comfort_tx + interest_level, data = df)
cmp_tbl <- createTable(cmp, show.n = F, show.ratio = F, show.p.overall = F)
# Compare groups
cmp <- compareGroups(cohort ~ curriculum + specialty + experience + icu_num + comfort_dx + comfort_tx + interest_level, data = df)
cmp_tbl <- createTable(cmp, show.n = F, show.ratio = F, show.p.overall = F)
cmp_tbl
# Compare groups
cmp <- compareGroups(cohort ~ curriculum + experience + comfort_dx + comfort_tx + interest_level, data = df)
cmp_tbl <- createTable(cmp, show.n = F, show.ratio = F, show.p.overall = F)
cmp_tbl
?export2word
demo$specialty
df$career_plan
demo$career_plan
demo
demo$proc_career
# Compare groups
cmp <- compareGroups(cohort ~ curriculum + experience + comfort_dx + comfort_tx + interest_level + proc_career, data = df)
cmp_tbl <- createTable(cmp, show.n = F, show.ratio = F, show.p.overall = F)
cmp_tbl
ls
ls()
demo
df_scores
ls()
df_concordance
df_overconfidence
df_scores
# Data
df <- inner_join(demo, df_scores)
df
df_concordance
# Graph
ggplot(df, aes(x=question)) +
geom_histogram()
# Data
df <- inner_join(demo, df_concordance)
# Graph
ggplot(df, aes(x=question)) +
geom_histogram()
# Graph
ggplot(df, aes(x=question)) +
geom_bar()
# Graph
ggplot(df, aes(x=factor(question), group = cohort)) +
geom_point()
df
# Graph
ggplot(df, aes(x=factor(question), group = cohort, y = correctness)) +
geom_point()
df_scores
# Data
df <- inner_join(demo, df_scores)
# Graph
ggplot(df, aes(x=cohort, y = percent)) +
geom_point()
# Graph
ggplot(df, aes(x=cohort, y = percent)) +
geom_histogram()
# Graph
ggplot(df, aes(x=cohort, y = percent)) +
geom_boxplot()
